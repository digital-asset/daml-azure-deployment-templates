{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "9517006300944826061"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region that will be targeted for resources."
      }
    },
    "postgresAdminLogin": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Postgres database administrator login name"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Postgres database administrator password"
      }
    },
    "company": {
      "type": "string",
      "metadata": {
        "description": "Company name registered with Digital Asset"
      }
    },
    "version": {
      "type": "string",
      "metadata": {
        "description": "Version of Canton"
      }
    },
    "username": {
      "type": "string",
      "metadata": {
        "description": "Username used with Digital Asset"
      }
    },
    "password": {
      "type": "securestring",
      "metadata": {
        "description": "Password used with Digital Asset"
      }
    },
    "rutcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "pgRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "akssubnet": "akssubnet",
    "pgsubnet": "pgsubnet",
    "firewallrules": [
      {
        "Name": "allowAzure",
        "StartIpAddress": "0.0.0.0",
        "EndIpAddress": "0.0.0.0"
      },
      {
        "Name": "allowAllInternet",
        "StartIPAddress": "0.0.0.0",
        "EndIpAddress": "255.255.255.255"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-02-01-preview",
      "name": "[format('{0}acr', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[format('{0}mi', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-01-01",
      "name": "[uniqueString(resourceGroup().id)]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.1.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('akssubnet')]",
            "properties": {
              "addressPrefix": "10.1.1.0/24"
            }
          },
          {
            "name": "[variables('pgsubnet')]",
            "properties": {
              "addressPrefix": "10.1.2.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2022-05-02-preview",
      "name": "[format('{0}aks', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "properties": {
        "dnsPrefix": "[format('{0}aks', uniqueString(resourceGroup().id))]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": 1,
            "vmSize": "Standard_D4s_v4",
            "mode": "System",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', uniqueString(resourceGroup().id), 'akssubnet')]"
          }
        ]
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id))))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Network/virtualNetworks', uniqueString(resourceGroup().id))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[format('{0}', guid(uniqueString(resourceGroup().id), parameters('rutcValue')))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('pgRoleId'))]",
        "description": "pgaas",
        "principalId": "[format('{0}', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))).principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-01-20-preview",
      "name": "[format('{0}pfs', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_D4ds_v4",
        "tier": "GeneralPurpose"
      },
      "properties": {
        "version": "14",
        "administratorLogin": "[parameters('postgresAdminLogin')]",
        "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
        "highAvailability": {
          "mode": "Disabled"
        },
        "storage": {
          "storageSizeGB": 32
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', uniqueString(resourceGroup().id))]"
      ]
    },
    {
      "copy": {
        "name": "firewallRules",
        "count": "[length(variables('firewallrules'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2022-01-20-preview",
      "name": "[format('{0}/{1}', format('{0}pfs', uniqueString(resourceGroup().id)), variables('firewallrules')[copyIndex()].Name)]",
      "properties": {
        "startIpAddress": "[variables('firewallrules')[copyIndex()].StartIpAddress]",
        "endIpAddress": "[variables('firewallrules')[copyIndex()].EndIpAddress]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}pfs', uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}dpy', uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id))))]": {}
        }
      },
      "properties": {
        "arguments": "[format('{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id))), resourceGroup().name, format('{0}aks', uniqueString(resourceGroup().id)), format('{0}acr', uniqueString(resourceGroup().id)), parameters('company'), parameters('username'), parameters('password'), parameters('version'), format('{0}pfs', uniqueString(resourceGroup().id)), parameters('postgresAdminLogin'), parameters('postgresAdminPassword'))]",
        "forceUpdateTag": "1",
        "containerSettings": {
          "containerGroupName": "[format('{0}ci1', uniqueString(resourceGroup().id))]"
        },
        "primaryScriptUri": "https://raw.githubusercontent.com/caleteeter/pg-test/main/scripts/deploy.sh",
        "timeout": "PT30M",
        "cleanupPreference": "OnSuccess",
        "azCliVersion": "2.28.0",
        "retentionInterval": "P1D"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', format('{0}acr', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.ContainerService/managedClusters', format('{0}aks', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}mi', uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}pfs', uniqueString(resourceGroup().id)))]"
      ]
    }
  ]
}
